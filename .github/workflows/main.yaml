name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-gar-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Authenticate to Google Cloud 
        id: auth
        uses: google-github-actions/auth@v1
        with:
          # token_format: 'access_token'
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
        

      - uses: 'docker/login-action@v1'
        with:
          registry: ${{secrets.GOOGLE_COMPUTE_ZONE}}-docker.pkg.dev
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Build, tag, and push image to google artifact registry
        id: build-image
        env:
          GOOGLE_COMPUTE_ZONE: ${{secrets.GOOGLE_COMPUTE_ZONE}}
          GOOGLE_PROJECT_ID : ${{secrets.GOOGLE_PROJECT_ID}}
          GAR_REPOSITORY: ${{secrets.GAR_REPOSITORY}}
          IMAGE_NAME : movie_booking
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to GAR so that it can
          # be deployed to GAR.
          docker build -t $GOOGLE_COMPUTE_ZONE-docker.pkg.dev/$GOOGLE_PROJECT_ID/$GAR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $GOOGLE_COMPUTE_ZONE-docker.pkg.dev/$GOOGLE_PROJECT_ID/$GAR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
          echo "::set-output name=image::$GOOGLE_COMPUTE_ZONE-docker.pkg.dev/$GOOGLE_PROJECT_ID/$GAR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG"
          
          
  Continuous-Deployment:
    needs: build-and-push-gar-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      #     aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws-region: ${{ secrets.REGION_NAME }}

      - name: Authenticate to Google Cloud 
        id: auth
        uses: google-github-actions/auth@v1
        with:
          # token_format: 'access_token'
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
        

      - uses: 'docker/login-action@v1'
        with:
          registry: ${{secrets.GOOGLE_COMPUTE_ZONE}}-docker.pkg.dev
          username: 'oauth2accesstoken'
          password: '${{steps.auth.outputs.access_token}}'
        
      - name: Clean previous images and containers
        run: |
         docker system prune -f

      - name: pull and run image to google artifact registry
        id: build-image
        env:
          GOOGLE_COMPUTE_ZONE: ${{secrets.GOOGLE_COMPUTE_ZONE}}
          GOOGLE_PROJECT_ID : ${{secrets.GOOGLE_PROJECT_ID}}
          GAR_REPOSITORY: ${{secrets.GAR_REPOSITORY}}
          IMAGE_NAME : movie_booking
          IMAGE_TAG: latest
        run: |
         docker pull $GOOGLE_COMPUTE_ZONE-docker.pkg.dev/$GOOGLE_PROJECT_ID/$GAR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
         docker tag $GOOGLE_COMPUTE_ZONE-docker.pkg.dev/$GOOGLE_PROJECT_ID/$GAR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG movie_booking
      - name: Stop and remove sensor container if running
        run: |
         docker ps -q --filter "name=movie" | grep -q . && docker stop movie && docker rm -fv movie
       
      - name: Run Docker Image to serve users
        run: |
         docker run --name=movie \
         -e 'SECRET_KEY=${{ secrets.SECRET_KEY }}' \
         -d -p 80:8080 movie_booking


      
        